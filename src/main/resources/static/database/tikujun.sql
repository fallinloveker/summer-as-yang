#create schema tikujun;
CREATE TABLE `question_bank` (
    `id` int(11) NOT NULL,
    `type` varchar(20) NOT NULL ,
    `subtype` varchar(20) NOT NULL ,
    `question` varchar(255) NOT NULL,
    `answer_a` varchar(255) NOT NULL,
    `answer_b` varchar(255) NOT NULL,
    `answer_c` varchar(255) NOT NULL,
    `answer_d` varchar(255) NOT NULL,
    `answer_true` varchar(255) NOT NULL
)ENGINE=InnoDB DEFAULT CHARSET=utf8;
CREATE TABLE `question_wrong`(
    `id_student` int(11) NOT NULL ,
    `id_question` int(11) NOT NULL
)ENGINE=InnoDB DEFAULT CHARSET=utf8;
CREATE TABLE `student`(
    `id` integer NOT NULL,
    `name` varchar(255) NOT NULL,
    `password` varchar(255) NOT NULL,
    `contact` integer NOT NULL,
    `question_number` integer,
    `true_number` integer
)ENGINE=InnoDB DEFAULT CHARSET=utf8;
CREATE TABLE `collection_bar`(
    `id_student` int(11) NOT NULL ,
    `id_question` int(11) NOT NULL
)ENGINE=InnoDB DEFAULT CHARSET=utf8;
CREATE TABLE  `question_number`(
    `id` INTEGER NOT NULL,
    `type` varchar(255) NOT NULL,
    `subtype` varchar(255) NOT NULL,
    `number_a` INTEGER NOT NULL,
    `number_b` INTEGER NOT NULL,
    `number_c` INTEGER NOT NULL,
    `number_d` INTEGER NOT NULL,
    `number_true` INTEGER NOT NULL,
    `number_all` INTEGER NOT NULL
)ENGINE=InnoDB DEFAULT CHARSET=utf8;
CREATE TABLE `administrator`(
    `id` integer NOT NULL,
    `name` varchar(255) NOT NULL,
    `password` varchar(255) NOT NULL,
    `contact` integer NOT NULL
)ENGINE=InnoDB DEFAULT CHARSET=utf8;
CREATE TABLE `question_date`(
    `year` INTEGER  NOT NULL,
    `month` INTEGER NOT NULL,
    `DataStruct_true` INTEGER NOT NULL,
    `DataStruct_all` INTEGER NOT NULL,
    `OperationSys_true` INTEGER NOT NULL,
    `OperationSys_all` INTEGER NOT NULL,
    `ComputerOrg_true` INTEGER NOT NULL,
    `ComputerOrg_all` INTEGER NOT NULL,
    `ComputerNet_true` INTEGER NOT NULL,
    `ComputerNet_all` INTEGER NOT NULL
)ENGINE=InnoDB DEFAULT CHARSET=utf8;
insert into question_bank values('1', 'DataStruct', 'DataStruct1', '在数据结构中，从逻辑上可以把数据结构分成（ ）', '动态结构和静态结构', '紧凑结构和非紧凑结构', '线性结构和非线性结构', '内部结构和外部结构', 'C'),
 ('2', 'DataStruct', 'DataStruct1', '与数据元素本身的形式、内容、相对位置、个数无关的是数据的（ ）', '存储结构', '存储实现', '逻辑结构', '运算实现', 'C'),
 ('3', 'DataStruct', 'DataStruct1', '一棵124个叶结点的完全二叉树,最多有()个结点', '247', '248', '249', '250', 'B'),
 ('4', 'DataStruct', 'DataStruct1', '以下说法正确的是（ ）', '数据元素是数据的最小单位', '数据项是数据的基本单位', '数据结构是带有结构的各数据项的集合', '一些表面上很不相同的数据可以有相同的逻辑结构', 'D'),
 ('5', 'DataStruct', 'DataStruct1', '下列哪个函数是O(N)的?', '2NlogN', 'logN', 'N(logN)', 'N/2', 'B'),
 ('6', 'DataStruct', 'DataStruct1', '算法的时间复杂度取决于（ ）', '问题的规模', '待处理数据的初态', '计算机的配置', 'A和B', 'D'),
 ('7', 'DataStruct', 'DataStruct1', '给定N×N×N的三维数组A，则在不改变数组的前提下，查找最小元素的时间复杂度是：', 'O(N)', 'O(NlogN)', 'O(NlogN)', 'O(N3)', 'D'),
 ('8', 'DataStruct', 'DataStruct1', '以下数据结构中，（ ）是非线性数据结构。', '树', '字符串', '队列', '栈', 'A'),
 ('9', 'DataStruct', 'DataStruct1', '一个队列的入队序列是1，2，3，4，则出队序列可能是( )', '4，3，2，1', '1，2，3，4', '1，4，3，2', '3，2，4，1', 'B'),
 ('10', 'DataStruct', 'DataStruct1', '线性表若采用链式存储结构时，要求内存中可用存储单元的地址', '必须是连续的', '连续或不连续都可以', '部分地址必须是连续的', '一定是不连续的', 'B'),
 ('11', 'DataStruct', 'DataStruct2', '线性表L在什么情况下适用于使用链式结构实现？', '需不断对L进行删除插入', '需经常修改L中的结点值', 'L中含有大量的结点', 'L中结点结构复杂', 'A'),
 ('12', 'DataStruct', 'DataStruct2', '链表不具有的特点是：', '插入、删除不需要移动元素', '方便随机访问任一元素', '不必事先估计存储空间', '所需空间与线性长度成正比', 'B'),
 ('13', 'DataStruct', 'DataStruct2', '适用于压缩存储稀疏矩阵的两种存储结构是：', '三元组表和十字链表', '三元组表和邻接矩阵', '十字链表和二叉链表', '邻接矩阵和十字链表', 'A'),
 ('14', 'DataStruct', 'DataStruct2', '在具有N个结点的单链表中，实现下列哪个操作，其算法的时间复杂度是O(N)？', '在地址为p的结点之后插入一个结点', '删除开始结点', '遍历链表和求链表的第i个结点', '删除地址为p的结点的后继结点', 'C'),
 ('15', 'DataStruct', 'DataStruct2', '设h为不带头结点的单向链表。在h的头上插入一个新结点t的语句是：', 'h=t; t->next=h->next;', 't->next=h->next; h=t;', 'h=t; t->next=h;', 't->next=h; h=t;', 'D'),
 ('16', 'DataStruct', 'DataStruct2', '在单链表中，若p所指的结点不是最后结点，在p之后插入s所指结点，则执行', 's->next=p; p->next=s;', 's->next=p->next; p=s;', 's->next=p->next; p->next=s;', 'p->next=s; s->next=p;', 'C'),
 ('17', 'DataStruct', 'DataStruct2', '带头结点的单链表h为空的判定条件是：', 'h == NULL;', 'h->next == NULL;', 'h->next == h;', 'h != NULL;', 'B'),
 ('18', 'DataStruct', 'DataStruct2', '对于一非空的循环单链表，h和p分别指向链表的头、尾结点，则有：', 'p->next == h', 'p->next == NULL', 'p == NULL', 'p == h', 'A'),
 ('19', 'DataStruct', 'DataStruct2', '设一个栈的输入序列是1、2、3、4、5，则下列序列中，是栈的合法输出序列的是？', '3 2 1 5 4', '5 1 2 3 4', '4 5 1 3 2', '4 3 1 2 5', 'A'),
 ('20', 'DataStruct', 'DataStruct2', '有六个元素以6、5、4、3、2、1的顺序进栈，问哪个不是合法的出栈序列？', '2 3 4 1 5 6', '3 4 6 5 2 1', '5 4 3 6 1 2', '4 5 3 1 2 6', 'B'),
 ('21', 'DataStruct', 'DataStruct3', '表达式a*(b+c)-d的后缀表达式是：', 'a b c + * d -', 'a b c d * + -', 'a b c * + d -', '- + * a b c d', 'A'),
 ('22', 'DataStruct', 'DataStruct3', '若top为指向栈顶元素的指针，判定栈S（最多容纳m个元素）为空的条件是：', 'S->top == 0', 'S->top == -1', 'S->top != m-1', 'S->top == m-1', 'B'),
 ('23', 'DataStruct', 'DataStruct3', '树最适合于用来表示', '有序数据元素', '无序数据元素', '元素之间无联系的数据', '元素之间具有分支层次关系的数据', 'D'),
 ('24', 'DataStruct', 'DataStruct3', '深度为6的二叉树最多有( )个结点。', '64', '63', '32', '31', 'B'),
 ('25', 'DataStruct', 'DataStruct3', '若一棵二叉树具有10个度为2的结点，5个度为1的结点，则度为0的结点个数是（ ）个。', '9', '11', '15', '不确定', 'B'),
 ('26', 'DataStruct', 'DataStruct3', '一个具有1025个结点的二叉树的高h为（ ）个。', '11', '10', '11至1025之间', '10至1024之间', 'C'),
 ('27', 'DataStruct', 'DataStruct3', '度为3的树中第4层上至多有（ ）个结点。', '12', '81', '27', '8', 'C'),
 ('28', 'DataStruct', 'DataStruct3', '一棵二叉树中有7个度为2的结点和5个度为1的结点，其总共有（ ）个结点。', '16', '18', '20', '30', 'C'),
 ('29', 'DataStruct', 'DataStruct3', '用二叉链表表示具有n个结点的二叉树时，值为空的指针域的个数为( )', 'n-1', 'n', 'n+l', '2n', 'C'),
 ('30', 'DataStruct', 'DataStruct3', '一棵有1001个结点的完全二叉树有多少个叶子结点?', '250', '254', '500', '501', 'D'),
 ('31', 'DataStruct', 'DataStruct4', '要连通具有n个顶点的有向图,至少需要()条边', 'n', 'n-1', 'n+1', '2n', 'B'),
 ('32', 'DataStruct', 'DataStruct4', '对包含N个元素的散列表进行查找，平均查找长度为：', 'O(1)', 'O(logN)', 'O(N)', '不确定', 'D'),
 ('33', 'DataStruct', 'DataStruct4', '在下列查找的方法中，平均查找长度与结点个数无关的查找方法是：', '顺序查找', '二分法', '利用哈希（散列）表', '利用二叉搜索树', 'C'),
 ('34', 'DataStruct', 'DataStruct4', '在散列表中，所谓同义词就是：', '两个意义相近的单词', '具有相同散列地址的两个元素', '被映射到不同散列地址的一个元素', '被不同散列函数映射到同一地址的两个元素', 'B'),
 ('35', 'DataStruct', 'DataStruct4', '下列排序算法中( )排序在一趟结束后不一定能选出一个元素放在其最终位置上。', '选择', '冒泡', '归并', '堆', 'C'),
 ('36', 'DataStruct', 'DataStruct4', '某内排序方法的稳定性是指（）。', '该排序算法不允许有相同的关键字记录', '该排序算法允许有相同的关键字记录', '以上都不对', '平均时间为0(nlogn)的排序方法', 'C'),
 ('37', 'DataStruct', 'DataStruct4', '下面的四种排序方法中，（）的排序过程中的比较次数与初始状态无关。', '选择排序法', '快速排序', '堆排序', '插入排序', 'A'),
 ('38', 'DataStruct', 'DataStruct4', '下列排序方法中，（）是稳定的排序方法？', '希尔排序', '直接插入排序', '快速排序', '直接选择排序', 'B'),
 ('39', 'DataStruct', 'DataStruct4', '对N个记录进行堆排序，需要的额外空间为：', 'O(1)', 'O(logN)', 'O(N)', 'O(NlogN)', 'A'),
 ('40', 'DataStruct', 'DataStruct4', '对N个记录进行堆排序，最坏的情况下时间复杂度是：', 'O(logN)', 'O(N)', 'O(NlogN)', 'O(N)', 'C'),
 ('41', 'DataStruct', 'DataStruct5', '对于10个数的简单选择排序，最坏情况下需要交换元素的次数为：', '9', '36', '45', '100', 'A'),
 ('42', 'DataStruct', 'DataStruct5', '对N个元素采用简单选择排序，比较次数和移动次数分别为', 'O(N), O(N)', 'O(N), O(logN)', 'O(logN), O(N)', 'O(NlogN), O(NlogN)', 'A'),
 ('43', 'DataStruct', 'DataStruct5', '对N个记录进行快速排序，在最坏的情况下，其时间复杂度是：', 'O(N)', 'O(NlogN)', 'O(N)', 'O(NlogN)', 'C'),
 ('44', 'DataStruct', 'DataStruct5', '有组记录的排序码为{ 46，79，56，38，40，84 }，则利用堆排序的方法建立的初始堆为：', '79，46，56，38，40，80', '4，79，56，46，40，38', '84，56，79，40，46，38', '84，79，6，38，40，46', 'D'),
 ('45', 'DataStruct', 'DataStruct5', '设有100个元素的有序序列，如果用二分插入排序再插入一个元素，则最大比较次数是：', '7', '10', '25', '50', 'A'),
 ('46', 'DataStruct', 'DataStruct5', '下列排序算法中，时间复杂度不受数据初始状态影响，恒为O(NlogN)的是：', '冒泡排序', '直接选择排序', '堆排序', '快速排序', 'C'),
 ('47', 'DataStruct', 'DataStruct5', '对N个记录进行归并排序，归并趟数的数量级是：', 'O(logN)', 'O(N)', 'O(NlogN)', 'O(N)', 'A'),
 ('48', 'DataStruct', 'DataStruct5', '对于7个数进行冒泡排序，需要进行的比较次数为：', '7', '14', '21', '49', 'C'),
 ('49', 'DataStruct', 'DataStruct5', '下面四种排序算法中，稳定的算法是：', '堆排序', '希尔排序', '归并排序', '快速排序', 'C'),
 ('50', 'DataStruct', 'DataStruct5', '下列的序列中，哪一组是堆？', '37,99,45,33,66,10,22,13', '99,45,66,13,37,10,22,33', '99,66,45,33,37,10,22,13', '99,66,22,33,37,13,45,10', 'C'),
 ('51', 'OperationSys', 'OperationSys1', '操作系统是一种（ ）', '应用软件', '系统软件', '通用软件', '工具软件', 'B'),
 ('52', 'OperationSys', 'OperationSys1', '多道程序设计是指（ ）', '在分布系统中同一时刻运行多个程序', '在一台处理机上同一时刻运行多个程序', '在实时系统中并发运行多个程序', '在一台处理机上并发运行多个程序', 'D'),
 ('53', 'OperationSys', 'OperationSys1', '从下面关于“并发性”的论述中，选出一条正确的论述（ ）', '并发性是指若干事件在不同时间间隔内发生', '并发性是指若干事件在同一时间间隔内发生', '并发性是指若干事件在同一时刻发生', '并发性是指若干事件在不同时刻发生', 'B'),
 ('54', 'OperationSys', 'OperationSys1', '通常所说的“存储保护”的基本含义是（  ）', '防止存储器硬件受损', '防止程序在内存丢失', '防止程序间相互越界访问', '防止程序被人偷看', 'C'),
 ('55', 'OperationSys', 'OperationSys1', '在计算机系统中配置操作系统的主要目的是（ ）', '增强计算机系统的功能', '提高系统资源的利用率', '提高系统的运行速度', '合理地组织系统的工作流程，以提高系统吞吐量', 'B'),
 ('56', 'OperationSys', 'OperationSys1', '操作系统能够的主要功能中，（ ）管理主要是对进程进行管理。', '处理机', '存储器', '文件管理', ' I/O设备管理', 'A'),
 ('57', 'OperationSys', 'OperationSys1', '用户可以通过（）两种方式使用计算机。', '命令接口和函数', '命令接口与系统调用', '命令接口和文件管理', '设备管理方式和系统调用', 'B'),
 ('58', 'OperationSys', 'OperationSys1', '下列各项步骤中，哪一个不是创建进程所必须的步骤（ ）', '分配一个进程控制块PCB', '由CPU调度程序为进程调度CPU', '为进程分配内存等必要的资源', '将PCB链入进程就绪队列', 'B'),
 ('59', 'OperationSys', 'OperationSys1', '以下存储管理方式中，不适合多道程序设计系统的是（ ）', '单用户连续分配', '固定式分区分配', '可变式分区分配', '分页式存储管理方式', 'A'),
 ('60', 'OperationSys', 'OperationSys1', '所谓临界区是指访问临界资源的（ ）', '一个缓冲区', '一段数据区', '同步机制', '程序段', 'D'),
 ('61', 'OperationSys', 'OperationSys2', '对于两个并发进程，设互斥信号量为mutex（初值为1），若mutex=-1，则（ ）', '表示没有进程进入临界区', '表示有一个进程进入临界区', '表示有一个进程进入临界区，另一个进程等待进入', '表示有两个进程进入临界区', 'C'),
 ('62', 'OperationSys', 'OperationSys2', '用V操作唤醒一个阻塞进程时，被唤醒进程的状态变为（ ）', '运行', '等待', '就绪', '完成', 'C'),
 ('63', 'OperationSys', 'OperationSys2', '下列进程调度算法中，综合考虑进程等待时间和执行时间的是（ ）', '时间片轮转调度算法', '短进程优先调度算法', '先来先服务调度算法', '高响应比优先调度算法', 'D'),
 ('64', 'OperationSys', 'OperationSys2', '下面哪个选项不属于环形缓冲区的组成（ ）', '空缓冲区', '现行工作缓冲区', '可用缓冲区指针', '头指针', 'D'),
 ('65', 'OperationSys', 'OperationSys2', '下面哪个选项不属于DMA控制器的组成（ ）', '主机与DMA控制器的接口', 'I/O控制逻辑', '数据处理单元', 'DMA控制器与块设备的接口', 'C'),
 ('66', 'OperationSys', 'OperationSys2', '下面哪个选项不属于中断处理程序的处理过程（ ）', '保护被中断进程的CPU环境', '中断处理', '屏蔽中断', '恢复CPU的现场', 'C'),
 ('67', 'OperationSys', 'OperationSys2', '若每个作业只能建立一个进程，为了照顾紧急作业用户，应采用（ ）', '短作业优先调度算法', '时间片轮转调度算法', '多级反馈队列调度算法', '剥夺式优先级调度算法', 'D'),
 ('68', 'OperationSys', 'OperationSys2', '假设系统中所有进程是同时到达，则使进程平均周转时间最短的是（ ）调度算法', '先来先服务', '短进程优先', '时间片轮转', '优先级', 'B'),
 ('69', 'OperationSys', 'OperationSys2', '下列选项中，满足短作业优先且不会发生饥饿现象的是（ ）调度算法。', '先来先服务', '高响应比优先', '时间片轮转', '非抢占式短作业优先', 'B'),
 ('70', 'OperationSys', 'OperationSys2', '把作业空间中使用的逻辑地址变为内存中物理地址称为（ ）。', '加载', '重定位', '物理化', '逻辑化', 'B'),
 ('71', 'OperationSys', 'OperationSys3', '一次分配所有资源的方法可以预防死锁的发生，它破坏的死锁四个必要条件中的（ ）', '互斥条件', '请求和保持条件', '非剥夺条件', '循环等待条件', 'B'),
 ('72', 'OperationSys', 'OperationSys3', '系统产生死锁的可能原因是（ ）', '独占资源分配不当', '系统资源不足', '进程运行太快', 'CPU内核太多', 'A'),
 ('73', 'OperationSys', 'OperationSys3', '死锁的避免是根据（ ）采取措施实现的。', '配置足够的系统资源', '使进程的推进顺序合理', '破坏死锁的四个必要条件之一', '防止系统进入不安全状态', 'D'),
 ('74', 'OperationSys', 'OperationSys3', '在存储管理中，采用覆盖与交换技术的目的是（ ）', '节省主存空间', '物理上扩充主存容量', '提高CPU效率', '实现主存共享', 'A'),
 ('75', 'OperationSys', 'OperationSys3', '段页式存储管理中，地址映射表是（ ）', '每个进程一张段表，两张页表', '每个进程的每个段一张段表，一张页表', '每个进程一张段表，每个段一张页表', '每个进程一张页表，每个段一张段表', 'C'),
 ('76', 'OperationSys', 'OperationSys3', '不会产生内部碎片的存储管理是（ ）', '分页式存储管理', '分段式存储管理', '固定分区存储管理', '段页式存储管理', 'B'),
 ('77', 'OperationSys', 'OperationSys3', '在段式分配中，CPU每次从内存中取一次数据需要（ ）次访问内存。', '1', '2', '3', '4', 'C'),
 ('78', 'OperationSys', 'OperationSys3', '在段页式分配中，CPU每次从内存中取一次数据需要（ ）次访问内存。', '1', '2', '3', '4', 'B'),
 ('79', 'OperationSys', 'OperationSys3', '（ ）存储管理方式提供一维地址结构', '分段', '分页', '分段和段页式', '以上答案都不正确', 'B'),
 ('80', 'OperationSys', 'OperationSys3', '在分段存储管理方式中，（ ）。', '以段为单位，每段是一个连续存储区', '段与段之间必定不连续', '段与段之间必定连续', '每段是等长的', 'A'),
 ('81', 'OperationSys', 'OperationSys4', '在采用SPOOLing技术的系统中，用户的打印数据首先被送到（ ）', '磁盘固定区域', '内存固定区域', '终端', '打印机', 'A'),
 ('82', 'OperationSys', 'OperationSys4', '（ ）是操作系统中采用的以空间换取时间的技术。', 'SPOOLing技术', '虚拟存储技术', '覆盖与交换技术', '通道技术', 'A'),
 ('83', 'OperationSys', 'OperationSys4', 'SPOOLing技术的主要目的是（ ）', '提高CPU和设备交换信息的速度', '提高独占设备的利用率', '减轻用户编程负担', '提供主．辅存接口', 'B'),
 ('84', 'OperationSys', 'OperationSys4', '提高单机资源利用率的关键技术是（ ）', 'SPOOLing技术', '虚拟技术', '交换技术', '多道程序设计技术', 'D'),
 ('85', 'OperationSys', 'OperationSys4', '以下（ ）不属于设备管理数据结构。', 'PCB', 'DCT', 'COCT', 'CHCT', 'A'),
 ('86', 'OperationSys', 'OperationSys4', 'DMA方式是在（ ）之间建立一条直接数据通路。', ' I/O设备和主存', '两个I/O设备', 'I/O设备和CPU', 'CPU和主存', 'A'),
 ('87', 'OperationSys', 'OperationSys4', '在段式分配中，CPU每次从内存中取一次数据需要（ ）次访问内存。', '1', '2', '3', '4', 'C'),
 ('88', 'OperationSys', 'OperationSys4', '在以下算法中，（ ）可能会随时改变磁头的运动方向', '电梯调度', '先来先服务', '循环扫描算法', '以上答案都不会', 'B'),
 ('89', 'OperationSys', 'OperationSys4', '以下算法中，（ ）可能出现“饥饿”现象。', '电梯调度', '最短寻找时间优先', '循环扫描算法', '先来先服务', 'B'),
 ('90', 'OperationSys', 'OperationSys4', '在磁盘中读取数据的下列时间中，影响最大的是（ ）', '处理时间', '延迟时间', '传送时间', '寻找（寻道）时间', 'D'),
 ('91', 'OperationSys', 'OperationSys5', '磁盘上的文件以（ ）为单位读/写', '块', '记录', '柱面', '磁道', 'A'),
 ('92', 'OperationSys', 'OperationSys5', '磁盘调度的目的是为了缩短（ ）时间。', '找道', '延迟', '传送', '启动', 'A'),
 ('93', 'OperationSys', 'OperationSys5', '磁盘的读写单位是（ ）', '磁道', '扇区', '字符', '字节', 'B'),
 ('94', 'OperationSys', 'OperationSys5', '文件的存储空间管理实质上是对（ ）的组织和管理。', '文件目录', '外存已占用区域', '外存空闲区', '文件控制块', 'C'),
 ('95', 'OperationSys', 'OperationSys5', '能用来唯一标识某个逻辑记录的数据项为记录的( )。', '主键', '次键 ', '索引', '指针', 'A'),
 ('96', 'OperationSys', 'OperationSys5', '对记录式文件，操作系统为用户存取文件信息的最小单位是（ ）', '字符', '数据项', '记录', '文件', 'C'),
 ('97', 'OperationSys', 'OperationSys5', '物理文件的组织方式是由（ ）确定的。', '应用程序', '主存容量', '外存容量', '操作系统', 'D'),
 ('98', 'OperationSys', 'OperationSys5', '位示图可用于（ ）', '文件目录的查找', '磁盘空间的管理', '主存空间的管理', '文件的保密', 'B'),
 ('99', 'OperationSys', 'OperationSys5', '下列文件物理结构中，适合随机访问且易于文件扩展的（ ）', '连续结构', '索引结构', '链式结构且磁盘块定长', '链式结构且磁盘块变长', 'B'),
 ('100', 'OperationSys', 'OperationSys5', '文件系统采用多级目录结构的目的是（ ）', '减少系统开销', '节省存储空间', '解决命名冲突', '缩短传送时间', 'C'),
 ('101', 'ComputerOrg', 'ComputerOrg1', '冯·诺依曼机的基本工作方式是（   ）', '控制流驱动方式', '多指令多数据流方式', '微程序控制方式 ', '数据流驱动方式', 'A'),
 ('102', 'ComputerOrg', 'ComputerOrg1', '下列（   ）是冯·诺依曼机工作方式的基本特点。', '多指令流单数据流', '按地址访问并顺序执行指令', '堆栈操作', '存储器按内容选择地址', 'B'),
 ('103', 'ComputerOrg', 'ComputerOrg1', '冯·诺依曼机中指令和数据均以二进制形式存放在存储器中，CPU区分它们的依据是（   ）', '指令操作码的译码结果', '指令和数据的寻址方式', '指令周期的不同阶段 ', '指令和数据所在的存储单元', 'C'),
 ('104', 'ComputerOrg', 'ComputerOrg1', '存放欲执行指令的寄存器是（   ）', 'MAR', 'PC', 'MDR', 'IR', 'D'),
 ('105', 'ComputerOrg', 'ComputerOrg1', '在CPU中，跟踪下一条要执行的指令的地址的寄存器是（    ）', 'PC ', 'MAR ', 'MDR', 'IR', 'A'),
 ('106', 'ComputerOrg', 'ComputerOrg1', 'MAR和MDR的位数分别为（   ）', '地址码长度、存储字长', '存储字长、存储字长', '地址码长度、地址码长度', '存储字长、地址码长度', 'A'),
 ('107', 'ComputerOrg', 'ComputerOrg1', '下列关于CPU存取速度的比较中，正确的是（    ）', 'Cache>内存>寄存器', 'Cache>寄存器>内存', '寄存器>Cache>内存', '寄存器>内存>Cache', 'C'),
 ('108', 'ComputerOrg', 'ComputerOrg1', '若一个8位的计算机系统以16位来表示地址，则该计算机系统有（   ）个地址空间。', '256', '65535', '65536', '131072', 'C'),
 ('109', 'ComputerOrg', 'ComputerOrg1', '采用虚拟存储器的目的是', '提高主存的速度', '扩大辅存的存取空间', '扩大存储器的寻址空间', '以上都不对', 'C'),
 ('110', 'ComputerOrg', 'ComputerOrg1', '将高级语言源程序转换成机器级目标代码文件的程序是（   ）', '汇编程序', '链接程序', '编译程序', '解释程序', 'C'),
 ('111', 'ComputerOrg', 'ComputerOrg2', '常用的虚拟存储器寻址系统由（ ）两级存储器组成。', '主存-辅存', ' 缓存-主存', '缓存-辅存', '以上都不对', 'A'),
 ('112', 'ComputerOrg', 'ComputerOrg2', '双端口RAM在（ ）情况下会发生读/写冲突。', '左端口和右端口的地址码不同', '左端口和右端口的地址码相同', '左端口和右端口的数据码不同', '左端口和右端口的数据码相同', 'B'),
 ('113', 'ComputerOrg', 'ComputerOrg2', '32位微机是指该计算机所用CPU（   ）', '具有32位寄存器', '能同时处理32位的二进制数', '具有32个寄存器 ', '能处理32个字符', 'B'),
 ('114', 'ComputerOrg', 'ComputerOrg2', 'CPU的CPI与下列（    ）因素无关。', '时钟频率', '系统结构', '指令集', '计算机组织', 'A'),
 ('115', 'ComputerOrg', 'ComputerOrg2', '下列选项中，描述浮点数操作速度指标的是（   ）', 'MIPS', 'CPI', 'IPC', 'MFLOPS', 'D'),
 ('116', 'ComputerOrg', 'ComputerOrg2', '将高级语言程序转换为机器级目标代码文件的程序是（   ）', '汇编程序', '链接程序', '编译程序', '解释程序', 'C'),
 ('117', 'ComputerOrg', 'ComputerOrg2', '下列各种存储单元的电路中，读数据时属于破坏性读出的存储是（   )', '双极型存储单元', '静态MOS型六管存储单元', '动态MOS四管存储单元', '动态MOS型单管单元', 'D'),
 ('118', 'ComputerOrg', 'ComputerOrg2', '4个16K×8位的存储芯片，可设计为（）容量的存储器。', '32K×16位', '16K×16位', '32K×8位', '8K×16位', 'A'),
 ('119', 'ComputerOrg', 'ComputerOrg2', '计算机的存储器采用分级方式是为了', '方便编程', '解决容量、速度、价格三者的矛盾', '保存大量数据方便', '操作方便', 'A'),
 ('120', 'ComputerOrg', 'ComputerOrg2', '下列不属于磁盘寻址信息的是（   )', '圆柱面号', '磁头号', '扇区号', '总线地址', 'D'),
 ('121', 'ComputerOrg', 'ComputerOrg3', '下列各类并行存储器中，能比较经济地实现流水式并行访存的是（   )', '单体多字的并行存储器', '顺序编址的多体并行存储器', '交叉编址的多体并行存储器', '以上三种存储器都不适合', 'C'),
 ('122', 'ComputerOrg', 'ComputerOrg3', '下列的磁记录编码方式中，需要提供同步信号才能实现数据读操作的方式是（   )', '不归零-1制', '调相制', '调频制', '都需要同步信号', 'A'),
 ('123', 'ComputerOrg', 'ComputerOrg3', '下列按内容寻址，而不是按地址码寻址的存储器是（   ）', '双端口存储器', '联想存储器', '并行储器', '虚拟存储器', 'B'),
 ('124', 'ComputerOrg', 'ComputerOrg3', '若二进制数为 1111.101 ，则相应的十进制数为 （ ）', '15.625', '15.5', '14.625', '14.5', 'A'),
 ('125', 'ComputerOrg', 'ComputerOrg3', '若［X］补=1.1011 ，则真值 X 是（ ）', '-0.1011', '-0.0101', '0.1011', '0.0101', 'B'),
 ('126', 'ComputerOrg', 'ComputerOrg3', '目前在小型和微型计算机里最普遍采用的字母与字符编码是（ ）', 'BCD码', '十六进制代码', 'ASCII码', '海明码', 'C'),
 ('127', 'ComputerOrg', 'ComputerOrg3', '零地址运算指令在指令格式中不给出操作数地址，它的操作数来自（ ）', '立即数和栈顶', '寄存器', '栈顶和次栈顶', '累加器', 'C'),
 ('128', 'ComputerOrg', 'ComputerOrg3', '寄存器间接寻址方式中操作数处在', '通用寄存器', '主存单元', '程序计数器', '堆栈', 'B'),
 ('129', 'ComputerOrg', 'ComputerOrg3', '直接、间接、立即三种寻址方式指令的执行速度，由快至慢的排序是（ ）', '直接、立即、间接', '直接、间接、立即', '立即、直接、间接', '立即、间接、直接', 'C'),
 ('130', 'ComputerOrg', 'ComputerOrg3', '微型计算机的性能主要由（  ）决定', 'RAM的存取速度', '显示器的分辨率', 'CPU的性能', '内存的大小', 'C'),
 ('131', 'ComputerOrg', 'ComputerOrg4', 'CPU包括（　　）两部分', 'ALU和累加器', 'ALU和控制器', '运算器和控制器', 'ALU和主存储器', 'C'),
 ('132', 'ComputerOrg', 'ComputerOrg4', '计算机运算速度的单位是（　　）', 'MTBF', 'MIPS', 'MHZ', 'MB', 'B'),
 ('133', 'ComputerOrg', 'ComputerOrg4', '若十六进数微AC.B，则其十进制数为（　　）', '254.54', '2763', '172.6875', '172.625', 'C'),
 ('134', 'ComputerOrg', 'ComputerOrg4', '若十进制数据为137.5则其八进制数为（　　）', '89.8', '211.4', '211.5', '1011111.101', 'B'),
 ('135', 'ComputerOrg', 'ComputerOrg4', '若x补=0.1101010，则x原=（　　）', '1.0010101', '1.0010110', '0.0010110', '0.1101010', 'D'),
 ('136', 'ComputerOrg', 'ComputerOrg4', '若用双符号位，则发生正溢的特征是：双符号位为（　　）', '00', '01', '10', '11', 'B'),
 ('137', 'ComputerOrg', 'ComputerOrg4', '补码加法运算是指（　　）', '操作数用补码表示，连同符号位一起相加', '操作数用补码表示，根据符号位决定实际操作', '将操作数转化为原码后再相加', '取操作数绝对直接相加，符号位单独处理', 'A'),
 ('138', 'ComputerOrg', 'ComputerOrg4', '原码乘法是（　　）', '先取操作数绝对值相乘，符号位单独处理', '用原码表示操作数，然后直接相乘', '被乘数用原码表示，乘数取绝对值，然后相乘', '乘数用原码表示，被乘数取绝对值，然后相乘', 'A'),
 ('139', 'ComputerOrg', 'ComputerOrg4', '浮点加减中的对阶的方法是（　　）', '将较小的一个阶码调整到与较大的一个阶码相同', '将较大的一个阶码调整到与较小的一个阶码相同', '将被加数的阶码调整到与加数的阶码相同', '将加数的阶码调整到与被加数的阶码相同', 'A'),
 ('140', 'ComputerOrg', 'ComputerOrg4', '在下列几种存储器中，CPU可直接访问的是（　　）', '主存储器', '磁盘', '磁带', '光盘', 'A'),
 ('141', 'ComputerOrg', 'ComputerOrg5', '静态半导体存储器SRAM指（　　）', '在工作过程中，存储内容保持不变', '在断电后信息仍能维持不变', '不需动态刷新', '芯片内部有自动刷新逻辑', 'C'),
 ('142', 'ComputerOrg', 'ComputerOrg5', '半导体静态存储器SRAM的存储原理是（　　）', '依靠双稳态电路', '依靠定时刷新', '依靠读后再生', '信息不再变化', 'A'),
 ('143', 'ComputerOrg', 'ComputerOrg5', '高速缓冲存储器Cache一般采取（　　）', '随机存取方式', '顺序存取方式', '半顺序存取方式', '只读不写方式', 'A'),
 ('144', 'ComputerOrg', 'ComputerOrg5', '虚地址是（　　）', '不存在的地址', '用户编程可使用的地址', '主存地址', '磁盘地址', 'B'),
 ('145', 'ComputerOrg', 'ComputerOrg5', '堆栈指针SP是（　　）', '栈顶单元内容', '栈顶单元地址', '栈底单元内容', '栈底单元地址', 'B'),
 ('146', 'ComputerOrg', 'ComputerOrg5', '为了缩短指令中某个地址段的位数，有效的方法是采取（　　）', '立即寻址', '变址寻址', '间接寻址', '寄存器寻址', 'D'),
 ('147', 'ComputerOrg', 'ComputerOrg5', '如果按变址方式读取操作数，则有效地址是指（　　）', '指令中直接给出的地址', '变址计算获得的地址', '变址寄存器中存放的地址', '基址寄存器中存放的地址', 'B'),
 ('148', 'ComputerOrg', 'ComputerOrg5', '在不同速度的设备之间传送数据，（　　）', '必须采用同步控制方式', '必须采用异步控制方式', '可以选用同步方式，也可选用异步方式', '必须采用应答方式', 'C'),
 ('149', 'ComputerOrg', 'ComputerOrg5', '为了缩短指令中某个地址段的位数，有效的方法是采取（  ）', '立即寻址', '变址寻址', '间接寻址', '寄存器寻址', 'C'),
 ('150', 'ComputerOrg', 'ComputerOrg5', '寄存器间接寻址方式中，操作数处在(   )', '通用寄存器', '贮存单元', '程序计数器', '堆栈', 'B'),
 ('151', 'ComputerNet', 'ComputerNet1', '关于TCP/IP的IP协议描述不正确的是 (  )', '是点到点的协议', '不能保证IP报文的可靠传送', '是无连接的数据报传输机制', '每一个IP数据包都需要对方应答', 'D'),
 ('152', 'ComputerNet', 'ComputerNet1', '以下哪一个设置不是上互联网所必须的（ ）', 'IP 地址', '工作组', '子网掩码', '网关', 'B'),
 ('153', 'ComputerNet', 'ComputerNet1', '数据解封装的过程是', '段—包—帧—流—数据 ', '流—帧—包—段—数据', '数据—包—段—帧—流', '数据—段—包—帧—流', 'B'),
 ('154', 'ComputerNet', 'ComputerNet1', 'TCP/IP协议是Internet中计算机之间通信所必须共同遵循的一种（ ）', '信息资源', '通信规则', '软件', '硬件', 'B'),
 ('155', 'ComputerNet', 'ComputerNet1', '以太网最小传送的帧长度为（）', '1500字节', '32字节', '64字节', '256字节', 'C'),
 ('156', 'ComputerNet', 'ComputerNet1', '一个IP地址包含网络地址与（ ）', '广播地址 ', '多址地址', '主机地址', '子网掩码', 'C'),
 ('157', 'ComputerNet', 'ComputerNet1', '在局域网中最有前途的一种传输介质是（）', '双绞线', '同轴电缆', '光纤', '电磁波', 'C'),
 ('158', 'ComputerNet', 'ComputerNet1', '在同一个信道上的同一时刻，能够进行双向数据传送的通信方式是（）', '单工', '半双工', '全双工', '上述三种均不是', 'C'),
 ('159', 'ComputerNet', 'ComputerNet1', '三次握手方法用于（）', '主机地址 ', '网络地址', '组播地址', '广播地址', 'C'),
 ('160', 'ComputerNet', 'ComputerNet1', '224.0.0.5 代表的是（）', '提供可靠的端—端服务，透明地传送报文', '路由选择、拥塞控制与网络互连', '在通信实体之间传送以帧为单位的数据', '数据格式变换、数据加密与解密、数据压缩与恢复', 'B'),
 ('161', 'ComputerNet', 'ComputerNet2', '以太网最大可传送的帧，数据长度为（ ）个8位组。', '64', '32', '256', '1500', 'D'),
 ('162', 'ComputerNet', 'ComputerNet2', '读取邮件的协议是（ ）。', 'SMTP协议', 'POP协议', 'MIME协议', 'PPP协议', 'B'),
 ('163', 'ComputerNet', 'ComputerNet2', '对IP数据报分片的重组通常发生在（ ）上。', '源主机', '目的主机', 'IP数据报经过的路由器', '目的主机或路由器', 'B'),
 ('164', 'ComputerNet', 'ComputerNet2', '采用全双工通信方式，数据传输的方向为（ ）', '可以在两个方向上同时传输', '只能在一个方向上传输', '可以在两个方向上传输但不能同时进行', '以上均不对', 'A'),
 ('165', 'ComputerNet', 'ComputerNet2', 'TCP/IP网络中常用的距离矢量路由协议是 （） ', 'ARP', 'ICMP', 'OSPF', 'RIP', 'D'),
 ('166', 'ComputerNet', 'ComputerNet2', '电子邮件服务器之间相互传递邮件通常使用的协议是（ ）', 'PPP', 'SMTP  ', 'FTP', 'EMAIL', 'B'),
 ('167', 'ComputerNet', 'ComputerNet2', 'OSPF协议是（ ）', '域内路由协议', '域间路由协议', '无域路由协议', '应用层协议', 'A'),
 ('168', 'ComputerNet', 'ComputerNet2', 'Internet 是由发展而来的（ ）', '局域网', 'ARPANET ', '标准网', 'WAN', 'B'),
 ('169', 'ComputerNet', 'ComputerNet2', 'POP3服务器用来（ ）邮件', '接收', '发送', '接收和发送', '以上均错', 'A'),
 ('170', 'ComputerNet', 'ComputerNet2', '在Internet主机域名中，下面哪个选项位于主机域名的最后位置（ ）。', '顶级域名', '二级域名', '三级域名', '四级域名', 'A'),
 ('171', 'ComputerNet', 'ComputerNet3', '因特网中完成域名地址和IP 地址转换的系统是（ ）', 'POP', 'DNS', 'SLIP', 'Usenet', 'B'),
 ('172', 'ComputerNet', 'ComputerNet3', '在Internet上浏览时，浏览器和WWW服务器之间传输网页使用的协议是', 'IP', 'HTTP ', 'FTP', 'Telnet', 'B'),
 ('173', 'ComputerNet', 'ComputerNet3', 'LAN参考模型中，网络层次被划分为（）', '物理层和数据链路层', '物理层、MAC和LLC子层', '物理层、数据链路层和网络层', '物理层和网络高层', 'B'),
 ('174', 'ComputerNet', 'ComputerNet3', '下面的关于TCP/IP的传输层协议表述不正确的有（）', '进程寻址', '提供无连接服务', '提供面向连接的服务', 'IP主机寻址', 'D'),
 ('175', 'ComputerNet', 'ComputerNet3', '在数据通信中，将数字信号变换为模拟信号的过程称为（）', '编码 ', '解码', '解调', '调制', 'D'),
 ('176', 'ComputerNet', 'ComputerNet3', '下列软件中可以查看WWW信息的是（）', '游戏软件 ', '财务软件', '杀毒软件', '浏览器软件', 'D'),
 ('177', 'ComputerNet', 'ComputerNet3', '通信系统必须具备的三个基本要素是（）', '终端、电缆、计算机', '信号发生器、通信线路、信号接收设备', '信源、通信媒体、信宿', '终端、通信设施、接收设备', 'C'),
 ('178', 'ComputerNet', 'ComputerNet3', 'OSI/RM参考模型的七层协议中低三层是（）', '会话层、总线层、网络层', '表示层、传输层、物理层', '物理层、数据链路层、网络层', '逻辑层、发送层、接收层', 'C'),
 ('179', 'ComputerNet', 'ComputerNet3', '计算机网络最突出的特点是（）', '资源共享', '运算精度高', '运算速度快', '内存容量大', 'A'),
 ('180', 'ComputerNet', 'ComputerNet3', '在OSI参考模型中，同层对等实体间进行信息交换时必须遵守的规则称为（）', '接口', '服务 ', '协议', '关系', 'C'),
 ('181', 'ComputerNet', 'ComputerNet4', '用（ ）表示在单位时间内通过某个网络（或信道、接口）的数据量。', '速率', '带宽', '吞吐量', '发送速率', 'C'),
 ('182', 'ComputerNet', 'ComputerNet4', '计算机网络最核心的功能是（ ）', '预防病毒', '数据通信和资源共享', '信息浏览', '下载文件', 'B'),
 ('183', 'ComputerNet', 'ComputerNet4', 'TCP/IP协议包括网络接口层、网际层、运输层和（）', '物理层 ', '表示层 ', '会话层', '应用层', 'D'),
 ('184', 'ComputerNet', 'ComputerNet4', '开放系统互连参考模型（OSI/RM）将网络体系结构化分为（ ）层。', '七', '五', '四', '三', 'A'),
 ('185', 'ComputerNet', 'ComputerNet4', '计算机网络是计算机技术和（ ）技术的产物。', '通信技术', '电子技术', '工业技术', '存储技术', 'A'),
 ('186', 'ComputerNet', 'ComputerNet4', '在同一个信道上的同一时刻，能够进行双向数据传送的通信方式是 （ ）', '单工', '半双工', '全双工', '三种均不是', 'C'),
 ('187', 'ComputerNet', 'ComputerNet4', '双绞线分（）两种。', '基带和窄带', '粗和细 ', '屏蔽和非屏蔽', '基带和宽带', 'C'),
 ('188', 'ComputerNet', 'ComputerNet4', '在物理层接口特性中，用于描述完成每种功能的时间发生顺序的是（ ）', '机械特性', '功能特性', '过程特性', '电气特性', 'C'),
 ('189', 'ComputerNet', 'ComputerNet4', '通过为多个信道分配互不重叠的时间片来实现多路复用技术的是', '频分多路复用', '时分多路复', '码分多路复用', '波分多路复用', 'B'),
 ('190', 'ComputerNet', 'ComputerNet4', '自带同步时钟信号的典型编码是（ ）', '归零码', '不归零码', '定比码', '曼彻斯特编码', 'D'),
 ('191', 'ComputerNet', 'ComputerNet5', '通信系统必须具备的三个基本要素是（）', '终端、电缆、计算机', '信号发生器、通信线路、信号接收设备', '源系统、传输系统、 目的系统', '终端、通信设施、接收设备', 'C'),
 ('192', 'ComputerNet', 'ComputerNet5', '调制解调器实现的信号转换是', '模/数和数/模 ', '调制/解调', '无线有线', '电信号/光信号', 'A'),
 ('193', 'ComputerNet', 'ComputerNet5', '光的频分复用技术叫', '频分复用', '时分复用', '波分复用', '码分复用', 'C'),
 ('194', 'ComputerNet', 'ComputerNet5', '以太网交换机的每一个端口可以看做一个（ ）', '碰撞域', '广播域', '管理域', '阻塞域', 'A'),
 ('195', 'ComputerNet', 'ComputerNet5', '在以太网中，是根据（ ）地址来区分不同的设备的。', ' LLC地址', 'MAC地址', 'IP地址', 'IPX地址', 'B'),
 ('196', 'ComputerNet', 'ComputerNet5', 'CSMA/CD是IEEE802.3所定义的协议标准，它适用于（ ）', '令牌环网', '令牌总线网 ', '网络互连', '以太网', 'D'),
 ('197', 'ComputerNet', 'ComputerNet5', '10BASE-T中T是指 （ ），10是指（ ）', '粗同轴电缆 ，10Gb/s', '细同轴电缆，10Mb/s', '双绞线，10Mb/s', '光纤，10Tb/s', 'C'),
 ('198', 'ComputerNet', 'ComputerNet5', 'PPP协议是哪一层的协议？( )', '物理层', '数据链路层', '网络层', '高层', 'B'),
 ('199', 'ComputerNet', 'ComputerNet5', '规定，下列 （）为有效的MAC帧。', '帧的长度不是整数个字节', '用收到的帧检验序列FCS查出有差错', '帧的MAC数据字段的长度在46－1518字节之间', '长度在64－1518字节之间的MAC帧', 'D'),
 ('200', 'ComputerNet', 'ComputerNet5', 'ComputerNet', '冲突域 ', '广播域', '管理域 ', '阻塞域', 'B');
INSERT INTO question_number values ('1', 'DataStruct', 'DataStruct1', '0','0','0','0','0','0'),
                                   ('2', 'DataStruct', 'DataStruct1','0','0','0','0','0','0'),
('3', 'DataStruct', 'DataStruct1','0','0','0','0','0','0'),
('4', 'DataStruct', 'DataStruct1','0','0','0','0','0','0'),
('5', 'DataStruct', 'DataStruct1','0','0','0','0','0','0'),
('6', 'DataStruct', 'DataStruct1','0','0','0','0','0','0'),
('7', 'DataStruct', 'DataStruct1','0','0','0','0','0','0'),
('8', 'DataStruct', 'DataStruct1','0','0','0','0','0','0'),
('9', 'DataStruct', 'DataStruct1','0','0','0','0','0','0'),
('10', 'DataStruct', 'DataStruct1','0','0','0','0','0','0'),
('11', 'DataStruct', 'DataStruct2','0','0','0','0','0','0'),
('12', 'DataStruct', 'DataStruct2','0','0','0','0','0','0'),
('13', 'DataStruct', 'DataStruct2','0','0','0','0','0','0'),
('14', 'DataStruct', 'DataStruct2','0','0','0','0','0','0'),
('15', 'DataStruct', 'DataStruct2','0','0','0','0','0','0'),
('16', 'DataStruct', 'DataStruct2','0','0','0','0','0','0'),
('17', 'DataStruct', 'DataStruct2','0','0','0','0','0','0'),
('18', 'DataStruct', 'DataStruct2','0','0','0','0','0','0'),
('19', 'DataStruct', 'DataStruct2','0','0','0','0','0','0'),
('20', 'DataStruct', 'DataStruct2','0','0','0','0','0','0'),
('21', 'DataStruct', 'DataStruct3','0','0','0','0','0','0'),
('22', 'DataStruct', 'DataStruct3','0','0','0','0','0','0'),
('23', 'DataStruct', 'DataStruct3','0','0','0','0','0','0'),
('24', 'DataStruct', 'DataStruct3','0','0','0','0','0','0'),
('25', 'DataStruct', 'DataStruct3','0','0','0','0','0','0'),
('26', 'DataStruct', 'DataStruct3','0','0','0','0','0','0'),
('27', 'DataStruct', 'DataStruct3','0','0','0','0','0','0'),
('28', 'DataStruct', 'DataStruct3','0','0','0','0','0','0'),
('29', 'DataStruct', 'DataStruct3','0','0','0','0','0','0'),
('30', 'DataStruct', 'DataStruct3','0','0','0','0','0','0'),
('31', 'DataStruct', 'DataStruct4','0','0','0','0','0','0'),
('32', 'DataStruct', 'DataStruct4','0','0','0','0','0','0'),
('33', 'DataStruct', 'DataStruct4','0','0','0','0','0','0'),
('34', 'DataStruct', 'DataStruct4','0','0','0','0','0','0'),
('35', 'DataStruct', 'DataStruct4','0','0','0','0','0','0'),
('36', 'DataStruct', 'DataStruct4','0','0','0','0','0','0'),
('37', 'DataStruct', 'DataStruct4','0','0','0','0','0','0'),
('38', 'DataStruct', 'DataStruct4','0','0','0','0','0','0'),
('39', 'DataStruct', 'DataStruct4','0','0','0','0','0','0'),
('40', 'DataStruct', 'DataStruct4','0','0','0','0','0','0'),
('41', 'DataStruct', 'DataStruct5','0','0','0','0','0','0'),
('42', 'DataStruct', 'DataStruct5','0','0','0','0','0','0'),
('43', 'DataStruct', 'DataStruct5','0','0','0','0','0','0'),
('44', 'DataStruct', 'DataStruct5','0','0','0','0','0','0'),
('45', 'DataStruct', 'DataStruct5','0','0','0','0','0','0'),
('46', 'DataStruct', 'DataStruct5','0','0','0','0','0','0'),
('47', 'DataStruct', 'DataStruct5','0','0','0','0','0','0'),
('48', 'DataStruct', 'DataStruct5','0','0','0','0','0','0'),
('49', 'DataStruct', 'DataStruct5','0','0','0','0','0','0'),
('50', 'DataStruct', 'DataStruct5','0','0','0','0','0','0'),
('51', 'OperationSys', 'OperationSys1','0','0','0','0','0','0'),
('52', 'OperationSys', 'OperationSys1','0','0','0','0','0','0'),
('53', 'OperationSys', 'OperationSys1','0','0','0','0','0','0'),
('54', 'OperationSys', 'OperationSys1','0','0','0','0','0','0'),
('55', 'OperationSys', 'OperationSys1','0','0','0','0','0','0'),
('56', 'OperationSys', 'OperationSys1','0','0','0','0','0','0'),
('57', 'OperationSys', 'OperationSys1','0','0','0','0','0','0'),
('58', 'OperationSys', 'OperationSys1','0','0','0','0','0','0'),
('59', 'OperationSys', 'OperationSys1','0','0','0','0','0','0'),
('60', 'OperationSys', 'OperationSys1','0','0','0','0','0','0'),
('61', 'OperationSys', 'OperationSys2','0','0','0','0','0','0'),
('62', 'OperationSys', 'OperationSys2','0','0','0','0','0','0'),
('63', 'OperationSys', 'OperationSys2','0','0','0','0','0','0'),
('64', 'OperationSys', 'OperationSys2','0','0','0','0','0','0'),
('65', 'OperationSys', 'OperationSys2','0','0','0','0','0','0'),
('66', 'OperationSys', 'OperationSys2','0','0','0','0','0','0'),
('67', 'OperationSys', 'OperationSys2','0','0','0','0','0','0'),
('68', 'OperationSys', 'OperationSys2','0','0','0','0','0','0'),
('69', 'OperationSys', 'OperationSys2','0','0','0','0','0','0'),
('70', 'OperationSys', 'OperationSys2','0','0','0','0','0','0'),
('71', 'OperationSys', 'OperationSys3','0','0','0','0','0','0'),
('72', 'OperationSys', 'OperationSys3','0','0','0','0','0','0'),
('73', 'OperationSys', 'OperationSys3','0','0','0','0','0','0'),
('74', 'OperationSys', 'OperationSys3','0','0','0','0','0','0'),
('75', 'OperationSys', 'OperationSys3','0','0','0','0','0','0'),
('76', 'OperationSys', 'OperationSys3','0','0','0','0','0','0'),
('77', 'OperationSys', 'OperationSys3','0','0','0','0','0','0'),
('78', 'OperationSys', 'OperationSys3','0','0','0','0','0','0'),
('79', 'OperationSys', 'OperationSys3','0','0','0','0','0','0'),
('80', 'OperationSys', 'OperationSys3','0','0','0','0','0','0'),
('81', 'OperationSys', 'OperationSys4','0','0','0','0','0','0'),
('82', 'OperationSys', 'OperationSys4','0','0','0','0','0','0'),
('83', 'OperationSys', 'OperationSys4','0','0','0','0','0','0'),
('84', 'OperationSys', 'OperationSys4','0','0','0','0','0','0'),
('85', 'OperationSys', 'OperationSys4','0','0','0','0','0','0'),
('86', 'OperationSys', 'OperationSys4','0','0','0','0','0','0'),
('87', 'OperationSys', 'OperationSys4','0','0','0','0','0','0'),
('88', 'OperationSys', 'OperationSys4','0','0','0','0','0','0'),
('89', 'OperationSys', 'OperationSys4','0','0','0','0','0','0'),
('90', 'OperationSys', 'OperationSys4','0','0','0','0','0','0'),
('91', 'OperationSys', 'OperationSys5','0','0','0','0','0','0'),
('92', 'OperationSys', 'OperationSys5','0','0','0','0','0','0'),
('93', 'OperationSys', 'OperationSys5','0','0','0','0','0','0'),
('94', 'OperationSys', 'OperationSys5','0','0','0','0','0','0'),
('95', 'OperationSys', 'OperationSys5','0','0','0','0','0','0'),
('96', 'OperationSys', 'OperationSys5','0','0','0','0','0','0'),
('97', 'OperationSys', 'OperationSys5','0','0','0','0','0','0'),
('98', 'OperationSys', 'OperationSys5','0','0','0','0','0','0'),
('99', 'OperationSys', 'OperationSys5','0','0','0','0','0','0'),
('100', 'OperationSys', 'OperationSys5','0','0','0','0','0','0'),
('101', 'ComputerOrg', 'ComputerOrg1','0','0','0','0','0','0'),
('102', 'ComputerOrg', 'ComputerOrg1','0','0','0','0','0','0'),
('103', 'ComputerOrg', 'ComputerOrg1','0','0','0','0','0','0'),
('104', 'ComputerOrg', 'ComputerOrg1','0','0','0','0','0','0'),
('105', 'ComputerOrg', 'ComputerOrg1','0','0','0','0','0','0'),
('106', 'ComputerOrg', 'ComputerOrg1','0','0','0','0','0','0'),
('107', 'ComputerOrg', 'ComputerOrg1','0','0','0','0','0','0'),
('108', 'ComputerOrg', 'ComputerOrg1','0','0','0','0','0','0'),
('109', 'ComputerOrg', 'ComputerOrg1','0','0','0','0','0','0'),
('110', 'ComputerOrg', 'ComputerOrg1','0','0','0','0','0','0'),
('111', 'ComputerOrg', 'ComputerOrg2','0','0','0','0','0','0'),
('112', 'ComputerOrg', 'ComputerOrg2','0','0','0','0','0','0'),
('113', 'ComputerOrg', 'ComputerOrg2','0','0','0','0','0','0'),
('114', 'ComputerOrg', 'ComputerOrg2','0','0','0','0','0','0'),
('115', 'ComputerOrg', 'ComputerOrg2','0','0','0','0','0','0'),
('116', 'ComputerOrg', 'ComputerOrg2','0','0','0','0','0','0'),
('117', 'ComputerOrg', 'ComputerOrg2','0','0','0','0','0','0'),
('118', 'ComputerOrg', 'ComputerOrg2','0','0','0','0','0','0'),
('119', 'ComputerOrg', 'ComputerOrg2','0','0','0','0','0','0'),
('120', 'ComputerOrg', 'ComputerOrg2','0','0','0','0','0','0'),
('121', 'ComputerOrg', 'ComputerOrg3','0','0','0','0','0','0'),
('122', 'ComputerOrg', 'ComputerOrg3','0','0','0','0','0','0'),
('123', 'ComputerOrg', 'ComputerOrg3','0','0','0','0','0','0'),
('124', 'ComputerOrg', 'ComputerOrg3','0','0','0','0','0','0'),
('125', 'ComputerOrg', 'ComputerOrg3','0','0','0','0','0','0'),
('126', 'ComputerOrg', 'ComputerOrg3','0','0','0','0','0','0'),
('127', 'ComputerOrg', 'ComputerOrg3','0','0','0','0','0','0'),
('128', 'ComputerOrg', 'ComputerOrg3','0','0','0','0','0','0'),
('129', 'ComputerOrg', 'ComputerOrg3','0','0','0','0','0','0'),
('130', 'ComputerOrg', 'ComputerOrg3','0','0','0','0','0','0'),
('131', 'ComputerOrg', 'ComputerOrg4','0','0','0','0','0','0'),
('132', 'ComputerOrg', 'ComputerOrg4','0','0','0','0','0','0'),
('133', 'ComputerOrg', 'ComputerOrg4','0','0','0','0','0','0'),
('134', 'ComputerOrg', 'ComputerOrg4','0','0','0','0','0','0'),
('135', 'ComputerOrg', 'ComputerOrg4','0','0','0','0','0','0'),
('136', 'ComputerOrg', 'ComputerOrg4','0','0','0','0','0','0'),
('137', 'ComputerOrg', 'ComputerOrg4','0','0','0','0','0','0'),
('138', 'ComputerOrg', 'ComputerOrg4','0','0','0','0','0','0'),
('139', 'ComputerOrg', 'ComputerOrg4','0','0','0','0','0','0'),
('140', 'ComputerOrg', 'ComputerOrg4','0','0','0','0','0','0'),
('141', 'ComputerOrg', 'ComputerOrg5','0','0','0','0','0','0'),
('142', 'ComputerOrg', 'ComputerOrg5','0','0','0','0','0','0'),
('143', 'ComputerOrg', 'ComputerOrg5','0','0','0','0','0','0'),
('144', 'ComputerOrg', 'ComputerOrg5','0','0','0','0','0','0'),
('145', 'ComputerOrg', 'ComputerOrg5','0','0','0','0','0','0'),
('146', 'ComputerOrg', 'ComputerOrg5','0','0','0','0','0','0'),
('147', 'ComputerOrg', 'ComputerOrg5','0','0','0','0','0','0'),
('148', 'ComputerOrg', 'ComputerOrg5','0','0','0','0','0','0'),
('149', 'ComputerOrg', 'ComputerOrg5','0','0','0','0','0','0'),
('150', 'ComputerOrg', 'ComputerOrg5','0','0','0','0','0','0'),
('151', 'ComputerNet', 'ComputerNet1','0','0','0','0','0','0'),
('152', 'ComputerNet', 'ComputerNet1','0','0','0','0','0','0'),
('153', 'ComputerNet', 'ComputerNet1','0','0','0','0','0','0'),
('154', 'ComputerNet', 'ComputerNet1','0','0','0','0','0','0'),
('155', 'ComputerNet', 'ComputerNet1','0','0','0','0','0','0'),
('156', 'ComputerNet', 'ComputerNet1','0','0','0','0','0','0'),
('157', 'ComputerNet', 'ComputerNet1','0','0','0','0','0','0'),
('158', 'ComputerNet', 'ComputerNet1','0','0','0','0','0','0'),
('159', 'ComputerNet', 'ComputerNet1','0','0','0','0','0','0'),
('160', 'ComputerNet', 'ComputerNet1','0','0','0','0','0','0'),
('161', 'ComputerNet', 'ComputerNet2','0','0','0','0','0','0'),
('162', 'ComputerNet', 'ComputerNet2','0','0','0','0','0','0'),
('163', 'ComputerNet', 'ComputerNet2','0','0','0','0','0','0'),
('164', 'ComputerNet', 'ComputerNet2','0','0','0','0','0','0'),
('165', 'ComputerNet', 'ComputerNet2','0','0','0','0','0','0'),
('166', 'ComputerNet', 'ComputerNet2','0','0','0','0','0','0'),
('167', 'ComputerNet', 'ComputerNet2','0','0','0','0','0','0'),
('168', 'ComputerNet', 'ComputerNet2','0','0','0','0','0','0'),
('169', 'ComputerNet', 'ComputerNet2','0','0','0','0','0','0'),
('170', 'ComputerNet', 'ComputerNet2','0','0','0','0','0','0'),
('171', 'ComputerNet', 'ComputerNet3','0','0','0','0','0','0'),
('172', 'ComputerNet', 'ComputerNet3','0','0','0','0','0','0'),
('173', 'ComputerNet', 'ComputerNet3','0','0','0','0','0','0'),
('174', 'ComputerNet', 'ComputerNet3','0','0','0','0','0','0'),
('175', 'ComputerNet', 'ComputerNet3','0','0','0','0','0','0'),
('176', 'ComputerNet', 'ComputerNet3','0','0','0','0','0','0'),
('177', 'ComputerNet', 'ComputerNet3','0','0','0','0','0','0'),
('178', 'ComputerNet', 'ComputerNet3','0','0','0','0','0','0'),
('179', 'ComputerNet', 'ComputerNet3','0','0','0','0','0','0'),
('180', 'ComputerNet', 'ComputerNet3','0','0','0','0','0','0'),
('181', 'ComputerNet', 'ComputerNet4','0','0','0','0','0','0'),
('182', 'ComputerNet', 'ComputerNet4','0','0','0','0','0','0'),
('183', 'ComputerNet', 'ComputerNet4','0','0','0','0','0','0'),
('184', 'ComputerNet', 'ComputerNet4','0','0','0','0','0','0'),
('185', 'ComputerNet', 'ComputerNet4','0','0','0','0','0','0'),
('186', 'ComputerNet', 'ComputerNet4','0','0','0','0','0','0'),
('187', 'ComputerNet', 'ComputerNet4','0','0','0','0','0','0'),
('188', 'ComputerNet', 'ComputerNet4','0','0','0','0','0','0'),
('189', 'ComputerNet', 'ComputerNet4','0','0','0','0','0','0'),
('190', 'ComputerNet', 'ComputerNet4','0','0','0','0','0','0'),
('191', 'ComputerNet', 'ComputerNet5','0','0','0','0','0','0'),
('192', 'ComputerNet', 'ComputerNet5','0','0','0','0','0','0'),
('193', 'ComputerNet', 'ComputerNet5','0','0','0','0','0','0'),
('194', 'ComputerNet', 'ComputerNet5','0','0','0','0','0','0'),
('195', 'ComputerNet', 'ComputerNet5','0','0','0','0','0','0'),
('196', 'ComputerNet', 'ComputerNet5','0','0','0','0','0','0'),
('197', 'ComputerNet', 'ComputerNet5','0','0','0','0','0','0'),
('198', 'ComputerNet', 'ComputerNet5','0','0','0','0','0','0'),
('199', 'ComputerNet', 'ComputerNet5','0','0','0','0','0','0'),
('200', 'ComputerNet', 'ComputerNet5','0','0','0','0','0','0');